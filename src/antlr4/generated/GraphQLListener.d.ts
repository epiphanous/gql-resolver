import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { SelectionOnlyOperationDefinitionContext } from "./GraphQLParser";
import { FullOperationDefinitionContext } from "./GraphQLParser";
import { FieldSelectionContext } from "./GraphQLParser";
import { FragmentSpreadSelectionContext } from "./GraphQLParser";
import { InlineFragmentSelectionContext } from "./GraphQLParser";
import { InputObjectTypeExtensionWithFieldsContext } from "./GraphQLParser";
import { InputObjectTypeExtensionWithDirectivesContext } from "./GraphQLParser";
import { InterfaceTypeExtensionWithFieldsContext } from "./GraphQLParser";
import { InterfaceTypeExtensionWithDirectivesContext } from "./GraphQLParser";
import { ObjectTypeExtensionWithFieldsContext } from "./GraphQLParser";
import { ObjectTypeExtensionWithDirectivesContext } from "./GraphQLParser";
import { ObjectTypeExtensionWithInterfacesContext } from "./GraphQLParser";
import { UnionTypeExtensionWithMembersContext } from "./GraphQLParser";
import { UnionTypeExtensionWithDirectivesContext } from "./GraphQLParser";
import { SchemaExtensionWithOperationsContext } from "./GraphQLParser";
import { SchemaExtensionWithoutOperationsContext } from "./GraphQLParser";
import { VariableValueContext } from "./GraphQLParser";
import { IntValueContext } from "./GraphQLParser";
import { FloatValueContext } from "./GraphQLParser";
import { StringValueContext } from "./GraphQLParser";
import { BooleanValueContext } from "./GraphQLParser";
import { NullValueContext } from "./GraphQLParser";
import { EnumValueContext } from "./GraphQLParser";
import { EmptyListValueContext } from "./GraphQLParser";
import { NonEmptyListValueContext } from "./GraphQLParser";
import { EmptyObjectValueContext } from "./GraphQLParser";
import { NonEmptyObjectValueContext } from "./GraphQLParser";
import { EnumTypeExtensionWithValuesContext } from "./GraphQLParser";
import { EnumTypeExtensionWithDirectivesContext } from "./GraphQLParser";
import { DocumentContext } from "./GraphQLParser";
import { DefinitionContext } from "./GraphQLParser";
import { ExecutableDefinitionContext } from "./GraphQLParser";
import { OperationDefinitionContext } from "./GraphQLParser";
import { OperationTypeContext } from "./GraphQLParser";
import { SelectionSetContext } from "./GraphQLParser";
import { SelectionContext } from "./GraphQLParser";
import { FieldContext } from "./GraphQLParser";
import { AliasContext } from "./GraphQLParser";
import { ArgumentsContext } from "./GraphQLParser";
import { ArgumentContext } from "./GraphQLParser";
import { FragmentSpreadContext } from "./GraphQLParser";
import { InlineFragmentContext } from "./GraphQLParser";
import { FragmentDefinitionContext } from "./GraphQLParser";
import { FragmentNameContext } from "./GraphQLParser";
import { TypeConditionContext } from "./GraphQLParser";
import { ValueContext } from "./GraphQLParser";
import { ObjectFieldContext } from "./GraphQLParser";
import { VariableDefinitionsContext } from "./GraphQLParser";
import { VariableDefinitionContext } from "./GraphQLParser";
import { VariableContext } from "./GraphQLParser";
import { DefaultValueContext } from "./GraphQLParser";
import { TypeContext } from "./GraphQLParser";
import { NamedTypeContext } from "./GraphQLParser";
import { ListTypeContext } from "./GraphQLParser";
import { NonNullTypeContext } from "./GraphQLParser";
import { DirectivesContext } from "./GraphQLParser";
import { DirectiveContext } from "./GraphQLParser";
import { TypeSystemDefinitionContext } from "./GraphQLParser";
import { TypeSystemExtensionContext } from "./GraphQLParser";
import { SchemaDefinitionContext } from "./GraphQLParser";
import { SchemaExtensionContext } from "./GraphQLParser";
import { OperationTypeDefinitionContext } from "./GraphQLParser";
import { DescriptionContext } from "./GraphQLParser";
import { TypeDefinitionContext } from "./GraphQLParser";
import { TypeExtensionContext } from "./GraphQLParser";
import { ScalarTypeDefinitionContext } from "./GraphQLParser";
import { ScalarTypeExtensionContext } from "./GraphQLParser";
import { ObjectTypeDefinitionContext } from "./GraphQLParser";
import { ObjectTypeExtensionContext } from "./GraphQLParser";
import { ImplementsInterfacesContext } from "./GraphQLParser";
import { FieldsDefinitionContext } from "./GraphQLParser";
import { FieldDefinitionContext } from "./GraphQLParser";
import { ArgumentsDefinitionContext } from "./GraphQLParser";
import { InputValueDefinitionContext } from "./GraphQLParser";
import { InterfaceTypeDefinitionContext } from "./GraphQLParser";
import { InterfaceTypeExtensionContext } from "./GraphQLParser";
import { UnionTypeDefinitionContext } from "./GraphQLParser";
import { UnionMemberTypesContext } from "./GraphQLParser";
import { UnionTypeExtensionContext } from "./GraphQLParser";
import { EnumTypeDefinitionContext } from "./GraphQLParser";
import { EnumValuesDefinitionContext } from "./GraphQLParser";
import { EnumValueDefinitionContext } from "./GraphQLParser";
import { EnumTypeExtensionContext } from "./GraphQLParser";
import { InputObjectTypeDefinitionContext } from "./GraphQLParser";
import { InputFieldsDefinitionContext } from "./GraphQLParser";
import { InputObjectTypeExtensionContext } from "./GraphQLParser";
import { DirectiveDefinitionContext } from "./GraphQLParser";
import { DirectiveLocationsContext } from "./GraphQLParser";
import { DirectiveLocationContext } from "./GraphQLParser";
import { ExecutableDirectiveLocationContext } from "./GraphQLParser";
import { TypeSystemDirectiveLocationContext } from "./GraphQLParser";
export interface GraphQLListener extends ParseTreeListener {
    enterSelectionOnlyOperationDefinition?: (ctx: SelectionOnlyOperationDefinitionContext) => void;
    exitSelectionOnlyOperationDefinition?: (ctx: SelectionOnlyOperationDefinitionContext) => void;
    enterFullOperationDefinition?: (ctx: FullOperationDefinitionContext) => void;
    exitFullOperationDefinition?: (ctx: FullOperationDefinitionContext) => void;
    enterFieldSelection?: (ctx: FieldSelectionContext) => void;
    exitFieldSelection?: (ctx: FieldSelectionContext) => void;
    enterFragmentSpreadSelection?: (ctx: FragmentSpreadSelectionContext) => void;
    exitFragmentSpreadSelection?: (ctx: FragmentSpreadSelectionContext) => void;
    enterInlineFragmentSelection?: (ctx: InlineFragmentSelectionContext) => void;
    exitInlineFragmentSelection?: (ctx: InlineFragmentSelectionContext) => void;
    enterInputObjectTypeExtensionWithFields?: (ctx: InputObjectTypeExtensionWithFieldsContext) => void;
    exitInputObjectTypeExtensionWithFields?: (ctx: InputObjectTypeExtensionWithFieldsContext) => void;
    enterInputObjectTypeExtensionWithDirectives?: (ctx: InputObjectTypeExtensionWithDirectivesContext) => void;
    exitInputObjectTypeExtensionWithDirectives?: (ctx: InputObjectTypeExtensionWithDirectivesContext) => void;
    enterInterfaceTypeExtensionWithFields?: (ctx: InterfaceTypeExtensionWithFieldsContext) => void;
    exitInterfaceTypeExtensionWithFields?: (ctx: InterfaceTypeExtensionWithFieldsContext) => void;
    enterInterfaceTypeExtensionWithDirectives?: (ctx: InterfaceTypeExtensionWithDirectivesContext) => void;
    exitInterfaceTypeExtensionWithDirectives?: (ctx: InterfaceTypeExtensionWithDirectivesContext) => void;
    enterObjectTypeExtensionWithFields?: (ctx: ObjectTypeExtensionWithFieldsContext) => void;
    exitObjectTypeExtensionWithFields?: (ctx: ObjectTypeExtensionWithFieldsContext) => void;
    enterObjectTypeExtensionWithDirectives?: (ctx: ObjectTypeExtensionWithDirectivesContext) => void;
    exitObjectTypeExtensionWithDirectives?: (ctx: ObjectTypeExtensionWithDirectivesContext) => void;
    enterObjectTypeExtensionWithInterfaces?: (ctx: ObjectTypeExtensionWithInterfacesContext) => void;
    exitObjectTypeExtensionWithInterfaces?: (ctx: ObjectTypeExtensionWithInterfacesContext) => void;
    enterUnionTypeExtensionWithMembers?: (ctx: UnionTypeExtensionWithMembersContext) => void;
    exitUnionTypeExtensionWithMembers?: (ctx: UnionTypeExtensionWithMembersContext) => void;
    enterUnionTypeExtensionWithDirectives?: (ctx: UnionTypeExtensionWithDirectivesContext) => void;
    exitUnionTypeExtensionWithDirectives?: (ctx: UnionTypeExtensionWithDirectivesContext) => void;
    enterSchemaExtensionWithOperations?: (ctx: SchemaExtensionWithOperationsContext) => void;
    exitSchemaExtensionWithOperations?: (ctx: SchemaExtensionWithOperationsContext) => void;
    enterSchemaExtensionWithoutOperations?: (ctx: SchemaExtensionWithoutOperationsContext) => void;
    exitSchemaExtensionWithoutOperations?: (ctx: SchemaExtensionWithoutOperationsContext) => void;
    enterVariableValue?: (ctx: VariableValueContext) => void;
    exitVariableValue?: (ctx: VariableValueContext) => void;
    enterIntValue?: (ctx: IntValueContext) => void;
    exitIntValue?: (ctx: IntValueContext) => void;
    enterFloatValue?: (ctx: FloatValueContext) => void;
    exitFloatValue?: (ctx: FloatValueContext) => void;
    enterStringValue?: (ctx: StringValueContext) => void;
    exitStringValue?: (ctx: StringValueContext) => void;
    enterBooleanValue?: (ctx: BooleanValueContext) => void;
    exitBooleanValue?: (ctx: BooleanValueContext) => void;
    enterNullValue?: (ctx: NullValueContext) => void;
    exitNullValue?: (ctx: NullValueContext) => void;
    enterEnumValue?: (ctx: EnumValueContext) => void;
    exitEnumValue?: (ctx: EnumValueContext) => void;
    enterEmptyListValue?: (ctx: EmptyListValueContext) => void;
    exitEmptyListValue?: (ctx: EmptyListValueContext) => void;
    enterNonEmptyListValue?: (ctx: NonEmptyListValueContext) => void;
    exitNonEmptyListValue?: (ctx: NonEmptyListValueContext) => void;
    enterEmptyObjectValue?: (ctx: EmptyObjectValueContext) => void;
    exitEmptyObjectValue?: (ctx: EmptyObjectValueContext) => void;
    enterNonEmptyObjectValue?: (ctx: NonEmptyObjectValueContext) => void;
    exitNonEmptyObjectValue?: (ctx: NonEmptyObjectValueContext) => void;
    enterEnumTypeExtensionWithValues?: (ctx: EnumTypeExtensionWithValuesContext) => void;
    exitEnumTypeExtensionWithValues?: (ctx: EnumTypeExtensionWithValuesContext) => void;
    enterEnumTypeExtensionWithDirectives?: (ctx: EnumTypeExtensionWithDirectivesContext) => void;
    exitEnumTypeExtensionWithDirectives?: (ctx: EnumTypeExtensionWithDirectivesContext) => void;
    enterDocument?: (ctx: DocumentContext) => void;
    exitDocument?: (ctx: DocumentContext) => void;
    enterDefinition?: (ctx: DefinitionContext) => void;
    exitDefinition?: (ctx: DefinitionContext) => void;
    enterExecutableDefinition?: (ctx: ExecutableDefinitionContext) => void;
    exitExecutableDefinition?: (ctx: ExecutableDefinitionContext) => void;
    enterOperationDefinition?: (ctx: OperationDefinitionContext) => void;
    exitOperationDefinition?: (ctx: OperationDefinitionContext) => void;
    enterOperationType?: (ctx: OperationTypeContext) => void;
    exitOperationType?: (ctx: OperationTypeContext) => void;
    enterSelectionSet?: (ctx: SelectionSetContext) => void;
    exitSelectionSet?: (ctx: SelectionSetContext) => void;
    enterSelection?: (ctx: SelectionContext) => void;
    exitSelection?: (ctx: SelectionContext) => void;
    enterField?: (ctx: FieldContext) => void;
    exitField?: (ctx: FieldContext) => void;
    enterAlias?: (ctx: AliasContext) => void;
    exitAlias?: (ctx: AliasContext) => void;
    enterArguments?: (ctx: ArgumentsContext) => void;
    exitArguments?: (ctx: ArgumentsContext) => void;
    enterArgument?: (ctx: ArgumentContext) => void;
    exitArgument?: (ctx: ArgumentContext) => void;
    enterFragmentSpread?: (ctx: FragmentSpreadContext) => void;
    exitFragmentSpread?: (ctx: FragmentSpreadContext) => void;
    enterInlineFragment?: (ctx: InlineFragmentContext) => void;
    exitInlineFragment?: (ctx: InlineFragmentContext) => void;
    enterFragmentDefinition?: (ctx: FragmentDefinitionContext) => void;
    exitFragmentDefinition?: (ctx: FragmentDefinitionContext) => void;
    enterFragmentName?: (ctx: FragmentNameContext) => void;
    exitFragmentName?: (ctx: FragmentNameContext) => void;
    enterTypeCondition?: (ctx: TypeConditionContext) => void;
    exitTypeCondition?: (ctx: TypeConditionContext) => void;
    enterValue?: (ctx: ValueContext) => void;
    exitValue?: (ctx: ValueContext) => void;
    enterObjectField?: (ctx: ObjectFieldContext) => void;
    exitObjectField?: (ctx: ObjectFieldContext) => void;
    enterVariableDefinitions?: (ctx: VariableDefinitionsContext) => void;
    exitVariableDefinitions?: (ctx: VariableDefinitionsContext) => void;
    enterVariableDefinition?: (ctx: VariableDefinitionContext) => void;
    exitVariableDefinition?: (ctx: VariableDefinitionContext) => void;
    enterVariable?: (ctx: VariableContext) => void;
    exitVariable?: (ctx: VariableContext) => void;
    enterDefaultValue?: (ctx: DefaultValueContext) => void;
    exitDefaultValue?: (ctx: DefaultValueContext) => void;
    enterType?: (ctx: TypeContext) => void;
    exitType?: (ctx: TypeContext) => void;
    enterNamedType?: (ctx: NamedTypeContext) => void;
    exitNamedType?: (ctx: NamedTypeContext) => void;
    enterListType?: (ctx: ListTypeContext) => void;
    exitListType?: (ctx: ListTypeContext) => void;
    enterNonNullType?: (ctx: NonNullTypeContext) => void;
    exitNonNullType?: (ctx: NonNullTypeContext) => void;
    enterDirectives?: (ctx: DirectivesContext) => void;
    exitDirectives?: (ctx: DirectivesContext) => void;
    enterDirective?: (ctx: DirectiveContext) => void;
    exitDirective?: (ctx: DirectiveContext) => void;
    enterTypeSystemDefinition?: (ctx: TypeSystemDefinitionContext) => void;
    exitTypeSystemDefinition?: (ctx: TypeSystemDefinitionContext) => void;
    enterTypeSystemExtension?: (ctx: TypeSystemExtensionContext) => void;
    exitTypeSystemExtension?: (ctx: TypeSystemExtensionContext) => void;
    enterSchemaDefinition?: (ctx: SchemaDefinitionContext) => void;
    exitSchemaDefinition?: (ctx: SchemaDefinitionContext) => void;
    enterSchemaExtension?: (ctx: SchemaExtensionContext) => void;
    exitSchemaExtension?: (ctx: SchemaExtensionContext) => void;
    enterOperationTypeDefinition?: (ctx: OperationTypeDefinitionContext) => void;
    exitOperationTypeDefinition?: (ctx: OperationTypeDefinitionContext) => void;
    enterDescription?: (ctx: DescriptionContext) => void;
    exitDescription?: (ctx: DescriptionContext) => void;
    enterTypeDefinition?: (ctx: TypeDefinitionContext) => void;
    exitTypeDefinition?: (ctx: TypeDefinitionContext) => void;
    enterTypeExtension?: (ctx: TypeExtensionContext) => void;
    exitTypeExtension?: (ctx: TypeExtensionContext) => void;
    enterScalarTypeDefinition?: (ctx: ScalarTypeDefinitionContext) => void;
    exitScalarTypeDefinition?: (ctx: ScalarTypeDefinitionContext) => void;
    enterScalarTypeExtension?: (ctx: ScalarTypeExtensionContext) => void;
    exitScalarTypeExtension?: (ctx: ScalarTypeExtensionContext) => void;
    enterObjectTypeDefinition?: (ctx: ObjectTypeDefinitionContext) => void;
    exitObjectTypeDefinition?: (ctx: ObjectTypeDefinitionContext) => void;
    enterObjectTypeExtension?: (ctx: ObjectTypeExtensionContext) => void;
    exitObjectTypeExtension?: (ctx: ObjectTypeExtensionContext) => void;
    enterImplementsInterfaces?: (ctx: ImplementsInterfacesContext) => void;
    exitImplementsInterfaces?: (ctx: ImplementsInterfacesContext) => void;
    enterFieldsDefinition?: (ctx: FieldsDefinitionContext) => void;
    exitFieldsDefinition?: (ctx: FieldsDefinitionContext) => void;
    enterFieldDefinition?: (ctx: FieldDefinitionContext) => void;
    exitFieldDefinition?: (ctx: FieldDefinitionContext) => void;
    enterArgumentsDefinition?: (ctx: ArgumentsDefinitionContext) => void;
    exitArgumentsDefinition?: (ctx: ArgumentsDefinitionContext) => void;
    enterInputValueDefinition?: (ctx: InputValueDefinitionContext) => void;
    exitInputValueDefinition?: (ctx: InputValueDefinitionContext) => void;
    enterInterfaceTypeDefinition?: (ctx: InterfaceTypeDefinitionContext) => void;
    exitInterfaceTypeDefinition?: (ctx: InterfaceTypeDefinitionContext) => void;
    enterInterfaceTypeExtension?: (ctx: InterfaceTypeExtensionContext) => void;
    exitInterfaceTypeExtension?: (ctx: InterfaceTypeExtensionContext) => void;
    enterUnionTypeDefinition?: (ctx: UnionTypeDefinitionContext) => void;
    exitUnionTypeDefinition?: (ctx: UnionTypeDefinitionContext) => void;
    enterUnionMemberTypes?: (ctx: UnionMemberTypesContext) => void;
    exitUnionMemberTypes?: (ctx: UnionMemberTypesContext) => void;
    enterUnionTypeExtension?: (ctx: UnionTypeExtensionContext) => void;
    exitUnionTypeExtension?: (ctx: UnionTypeExtensionContext) => void;
    enterEnumTypeDefinition?: (ctx: EnumTypeDefinitionContext) => void;
    exitEnumTypeDefinition?: (ctx: EnumTypeDefinitionContext) => void;
    enterEnumValuesDefinition?: (ctx: EnumValuesDefinitionContext) => void;
    exitEnumValuesDefinition?: (ctx: EnumValuesDefinitionContext) => void;
    enterEnumValueDefinition?: (ctx: EnumValueDefinitionContext) => void;
    exitEnumValueDefinition?: (ctx: EnumValueDefinitionContext) => void;
    enterEnumTypeExtension?: (ctx: EnumTypeExtensionContext) => void;
    exitEnumTypeExtension?: (ctx: EnumTypeExtensionContext) => void;
    enterInputObjectTypeDefinition?: (ctx: InputObjectTypeDefinitionContext) => void;
    exitInputObjectTypeDefinition?: (ctx: InputObjectTypeDefinitionContext) => void;
    enterInputFieldsDefinition?: (ctx: InputFieldsDefinitionContext) => void;
    exitInputFieldsDefinition?: (ctx: InputFieldsDefinitionContext) => void;
    enterInputObjectTypeExtension?: (ctx: InputObjectTypeExtensionContext) => void;
    exitInputObjectTypeExtension?: (ctx: InputObjectTypeExtensionContext) => void;
    enterDirectiveDefinition?: (ctx: DirectiveDefinitionContext) => void;
    exitDirectiveDefinition?: (ctx: DirectiveDefinitionContext) => void;
    enterDirectiveLocations?: (ctx: DirectiveLocationsContext) => void;
    exitDirectiveLocations?: (ctx: DirectiveLocationsContext) => void;
    enterDirectiveLocation?: (ctx: DirectiveLocationContext) => void;
    exitDirectiveLocation?: (ctx: DirectiveLocationContext) => void;
    enterExecutableDirectiveLocation?: (ctx: ExecutableDirectiveLocationContext) => void;
    exitExecutableDirectiveLocation?: (ctx: ExecutableDirectiveLocationContext) => void;
    enterTypeSystemDirectiveLocation?: (ctx: TypeSystemDirectiveLocationContext) => void;
    exitTypeSystemDirectiveLocation?: (ctx: TypeSystemDirectiveLocationContext) => void;
}
