import { Option, Try } from 'funfix';
import { List, Map, Set } from 'immutable';
import { ArgumentContext, ArgumentsContext, ArgumentsDefinitionContext, DirectiveContext, DirectiveDefinitionContext, DirectivesContext, EnumTypeDefinitionContext, EnumTypeExtensionWithDirectivesContext, EnumTypeExtensionWithValuesContext, EnumValuesDefinitionContext, FieldDefinitionContext, FieldsDefinitionContext, GraphQLParser, ImplementsInterfacesContext, InputFieldsDefinitionContext, InputObjectTypeDefinitionContext, InputObjectTypeExtensionWithDirectivesContext, InputObjectTypeExtensionWithFieldsContext, InterfaceTypeDefinitionContext, InterfaceTypeExtensionWithDirectivesContext, InterfaceTypeExtensionWithFieldsContext, ObjectTypeDefinitionContext, ObjectTypeExtensionWithDirectivesContext, ObjectTypeExtensionWithFieldsContext, ObjectTypeExtensionWithInterfacesContext, ScalarTypeDefinitionContext, ScalarTypeExtensionContext, SchemaDefinitionContext, SchemaExtensionWithOperationsContext, SchemaExtensionWithoutOperationsContext, UnionMemberTypesContext, UnionTypeDefinitionContext, UnionTypeExtensionWithDirectivesContext, UnionTypeExtensionWithMembersContext } from '../../antlr4/generated/GraphQLParser';
import { GQLArgument } from '../../models/GQLArgument';
import { GQLDirective } from '../../models/GQLDirective';
import { GQLSchema } from '../../models/GQLSchema';
import { GQLArgumentDefinition, GQLDirectiveDefinition, GQLEnum, GQLEnumValueDefinition, GQLFieldDefinition, GQLInputType, GQLInterface, GQLObjectType, GQLScalarType, GQLUnion } from '../../models/GQLTypeDefinition';
import { GQLDocumentBuilder } from './GQLDocumentBuilder';
export declare class GQLSchemaBuilder extends GQLDocumentBuilder<GQLSchema> {
    operationTypes: Map<string, string>;
    scalarTypes: Set<GQLScalarType>;
    interfaces: Set<GQLInterface>;
    objectTypes: Set<GQLObjectType>;
    inputTypes: Set<GQLInputType>;
    unions: Set<GQLUnion>;
    enums: Set<GQLEnum>;
    directives: Set<GQLDirectiveDefinition>;
    allFields: Map<string, GQLFieldDefinition>;
    schemaDirectives: Set<GQLDirective>;
    build(parser: GraphQLParser): Try<GQLSchema>;
    exitSchemaDefinition(ctx: SchemaDefinitionContext | SchemaExtensionWithOperationsContext): void;
    exitSchemaExtensionWithOperations(ctx: SchemaExtensionWithOperationsContext): void;
    exitSchemaExtensionWithoutOperations(ctx: SchemaExtensionWithoutOperationsContext): void;
    exitScalarTypeDefinition(ctx: ScalarTypeDefinitionContext): void;
    exitScalarTypeExtension(ctx: ScalarTypeExtensionContext): void;
    exitObjectTypeDefinition(ctx: ObjectTypeDefinitionContext): void;
    exitObjectTypeExtensionWithFields(ctx: ObjectTypeExtensionWithFieldsContext): void;
    exitObjectTypeExtensionWithDirectives(ctx: ObjectTypeExtensionWithDirectivesContext): void;
    exitObjectTypeExtensionWithInterfaces(ctx: ObjectTypeExtensionWithInterfacesContext): void;
    exitInterfaceTypeDefinition(ctx: InterfaceTypeDefinitionContext): void;
    exitInterfaceTypeExtensionWithFields(ctx: InterfaceTypeExtensionWithFieldsContext): void;
    exitInterfaceTypeExtensionWithDirectives(ctx: InterfaceTypeExtensionWithDirectivesContext): void;
    exitUnionTypeDefinition(ctx: UnionTypeDefinitionContext): void;
    exitUnionTypeExtensionWithMembers(ctx: UnionTypeExtensionWithMembersContext): void;
    exitUnionTypeExtensionWithDirectives(ctx: UnionTypeExtensionWithDirectivesContext): void;
    exitEnumTypeDefinition(ctx: EnumTypeDefinitionContext): void;
    exitEnumTypeExtensionWithValues(ctx: EnumTypeExtensionWithValuesContext): void;
    exitEnumTypeExtensionWithDirectives(ctx: EnumTypeExtensionWithDirectivesContext): void;
    exitInputObjectTypeDefinition(ctx: InputObjectTypeDefinitionContext): void;
    exitInputObjectTypeExtensionWithFields(ctx: InputObjectTypeExtensionWithFieldsContext): void;
    exitInputObjectTypeExtensionWithDirectives(ctx: InputObjectTypeExtensionWithDirectivesContext): void;
    exitDirectiveDefinition(ctx: DirectiveDefinitionContext): void;
    getArgumentDefinitions(ctxOpt: Option<ArgumentsDefinitionContext | InputFieldsDefinitionContext>): List<GQLArgumentDefinition>;
    getInterfaces(ctxOpt: Option<ImplementsInterfacesContext>): List<string>;
    getFieldDefinitions(ctxOpt: Option<FieldsDefinitionContext>): List<GQLFieldDefinition>;
    getEnumValues(ctxOpt: Option<EnumValuesDefinitionContext>): List<GQLEnumValueDefinition>;
    getFieldDefinition(ctx: FieldDefinitionContext): GQLFieldDefinition;
    getUnionMembers(ctxOpt: Option<UnionMemberTypesContext>): List<string>;
    getDirectives(ctxOpt: Option<DirectivesContext>): List<GQLDirective>;
    getDirective(ctx: DirectiveContext): GQLDirective;
    getArguments(ctxOpt: Option<ArgumentsContext>): List<GQLArgument>;
    getArgument(ctx: ArgumentContext): GQLArgument;
}
