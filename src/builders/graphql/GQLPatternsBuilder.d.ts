import { Parser } from 'antlr4ts';
import { List, Map, Set } from 'immutable';
import * as QMP from '../../antlr4/generated/QueryModificationParser';
import { GQLObjectQueryModifierBasicExpression } from '../../models/GQLObjectQueryModifierExpression';
import * as GQLP from '../../models/GQLPattern';
import { GQLVariableDefinition } from '../../models/GQLVariableDefinition';
import { GQLObjectQueryModifierBuilder } from './GQLObjectQueryModifierBuilder';
export declare class GQLPatternsBuilder extends GQLObjectQueryModifierBuilder {
    validFields: Map<string, string>;
    validVariables: Set<GQLVariableDefinition>;
    vars: Map<string, string>;
    prefixes: Set<string>;
    source: string;
    referencedFields: Set<string>;
    result: List<GQLP.GQLPattern | undefined>;
    constructor(validFields: Map<string, string>, validVariables: Set<GQLVariableDefinition>, vars: Map<string, any>, prefixes: Set<string>, source?: string);
    parse(parse: Parser): any;
    exitPatterns(context: QMP.PatternsContext): void;
    processPatterns(context: QMP.PatternsContext): List<GQLP.GQLGeoNearFeaturePattern | GQLP.GQLGeoNearLatLonPattern | GQLP.GQLTextMatchPattern | undefined>;
    processPattern(context: QMP.PatternContext): GQLP.GQLGeoNearFeaturePattern | GQLP.GQLGeoNearLatLonPattern | GQLP.GQLTextMatchPattern | undefined;
    processTextMatchPattern(context: QMP.TextMatchPatternContext): GQLP.GQLTextMatchPattern;
    asDouble(n: any): string;
    processGeoNearbyPattern(context: QMP.GeoNearbyPatternContext): GQLP.GQLGeoNearFeaturePattern | GQLP.GQLGeoNearLatLonPattern | undefined;
    processLatLonCoordinate(latlon: QMP.LatLonContext, coord: number): GQLObjectQueryModifierBasicExpression | import("../../models/GQLObjectQueryModifierExpression").GQLObjectQueryModifierBasicPrimitiveExpression;
    processFeature(context: QMP.FeatureContext): string;
    processTextMatchParam(context: QMP.TextMatchParamContext): [string, any] | undefined;
    processTextMatchBoostParam(context: QMP.TextMatchBoostParamContext): [string, any];
    processTextMatchMaxHitsParam(context: QMP.TextMatchMaxHitsParamContext): [string, any];
    processTextMatchMinScoreParam(context: QMP.TextMatchMinScoreParamContext): [string, any];
}
