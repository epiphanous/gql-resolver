import { Option, Try } from 'funfix';
import { List, Map, Set } from 'immutable';
import { ArgumentContext, ArgumentsContext, DirectiveContext, DirectivesContext, DocumentContext, FieldContext, FragmentDefinitionContext, FragmentSpreadContext, FullOperationDefinitionContext, GraphQLParser, InlineFragmentContext, SelectionOnlyOperationDefinitionContext, SelectionSetContext, TypeConditionContext, VariableContext, VariableDefinitionContext, VariableDefinitionsContext } from '../../antlr4/generated/GraphQLParser';
import { GQLArgument } from '../../models/GQLArgument';
import { GQLBinding } from '../../models/GQLBinding';
import { GQLBooster } from '../../models/GQLBooster';
import { GQLDirective } from '../../models/GQLDirective';
import { GQLFilter } from '../../models/GQLFilter';
import { GQLFragmentDefinition } from '../../models/GQLFragmentDefinition';
import { GQLOperation } from '../../models/GQLOperation';
import { GQLSortBy } from '../../models/GQLSortBy';
import { GQLPattern } from '../../models/GQLPattern';
import { GQLQueryArguments } from '../../models/GQLQueryArguments';
import { GQLQueryDocument } from '../../models/GQLQueryDocument';
import { GQLSchema } from '../../models/GQLSchema';
import { GQLField, GQLFragmentSpread, GQLInlineFragment, GQLSelection } from '../../models/GQLSelection';
import { GQLTransform } from '../../models/GQLTransform';
import { GQLDirectiveDefinition, GQLFieldDefinition, GQLInputType } from '../../models/GQLTypeDefinition';
import { GQLVariable } from '../../models/GQLVariable';
import { GQLVariableDefinition } from '../../models/GQLVariableDefinition';
import { ResolverContext } from '../../models/ResolverContext';
import { GQLDocumentBuilder } from './GQLDocumentBuilder';
export declare class GQLQueryBuilder extends GQLDocumentBuilder<GQLQueryDocument> {
    schema: GQLSchema;
    context: ResolverContext;
    vars: Map<string, any>;
    operationName: Option<string>;
    operations: List<GQLOperation>;
    fragmentDefinitions: Set<GQLFragmentDefinition>;
    variables: Set<GQLVariableDefinition>;
    constructor(context: ResolverContext, vars?: Map<string, any>, operationName?: Option<string>);
    getPrefixes(): Map<string, import("../..").SimpleNamespace>;
    build(parser: GraphQLParser): Try<GQLQueryDocument>;
    processArgs(args: List<GQLArgument>, allFields: Map<string, string>): GQLQueryArguments;
    processFilter(filterExpr: string, validFields: Map<string, string>): GQLFilter;
    processPatterns(patternsExpr: string, validFields: Map<string, string>): List<GQLPattern>;
    processBindings(bindingsExpr: string, validFields: Map<string, string>): List<GQLBinding>;
    processBoosters(boostersExpr: string, validFields: Map<string, string>): List<GQLBooster>;
    processOrder(orderExpr: string, validFields: Map<string, string>): List<GQLSortBy>;
    processTransforms(transformsExpr: string): List<GQLTransform>;
    exitDocument(ctx: DocumentContext): void;
    exitFullOperationDefinition(ctx: FullOperationDefinitionContext): void;
    exitSelectionOnlyOperationDefinition(ctx: SelectionOnlyOperationDefinitionContext): void;
    processVariableDefinitions(ctxOpt: Option<VariableDefinitionsContext>): List<GQLVariableDefinition>;
    processVariableDefinition(ctx: VariableDefinitionContext): GQLVariableDefinition;
    processVariable(ctx: VariableContext): GQLVariable;
    exitFragmentDefinition(ctx: FragmentDefinitionContext): void;
    processTypeCondition(ctx: TypeConditionContext): string;
    processSelectionSet(ctx: SelectionSetContext): List<GQLSelection>;
    processField(ctx: FieldContext): GQLField;
    processDirectives(ctxOpt: Option<DirectivesContext>): List<GQLDirective>;
    processDirective(ctx: DirectiveContext): GQLDirective;
    getArguments(ctxOpt: Option<ArgumentsContext>, typeDefOpt: Option<GQLFieldDefinition | GQLDirectiveDefinition | GQLInputType>): List<GQLArgument>;
    getArgument(ctx: ArgumentContext, typeDef: Option<GQLFieldDefinition | GQLDirectiveDefinition | GQLInputType>): GQLArgument;
    processInlineFragment(ctx: InlineFragmentContext): GQLInlineFragment;
    processFragmentSpread(ctx: FragmentSpreadContext): GQLFragmentSpread;
}
