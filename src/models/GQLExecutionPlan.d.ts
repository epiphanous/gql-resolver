import { Option } from 'funfix';
import { List, Map } from 'immutable';
import { GQLQueryBuilder } from '../builders/graphql/GQLQueryBuilder';
import { GQLArgument } from './GQLArgument';
import { GQLDirective } from './GQLDirective';
import { GQLQueryArguments } from './GQLQueryArguments';
import { GQLField } from './GQLSelection';
import { GQLFieldDefinition, GQLTypeDefinition } from './GQLTypeDefinition';
import { QueryResult } from './QueryResult';
import { ResolverContext } from './ResolverContext';
export interface IGQLExecutionPlan {
    parent: GQLExecutionPlan | null;
    context: ResolverContext;
    vars: Map<string, any>;
    name: string;
    alias: Option<string>;
    args: List<GQLArgument>;
    directives: List<GQLDirective>;
    fields: List<GQLField>;
    resultType: GQLTypeDefinition;
    plans: List<GQLExecutionPlan>;
    scalars: List<QueryResult>;
    objects: List<QueryResult>;
    result: QueryResult;
    allFields: List<GQLField>;
    defaultStrategy: string;
    execute(queryBuilder: GQLQueryBuilder): Promise<QueryResult>;
}
export declare class GQLExecutionPlan implements IGQLExecutionPlan {
    parent: GQLExecutionPlan | null;
    context: ResolverContext;
    vars: Map<string, any>;
    name: string;
    alias: Option<string>;
    args: List<GQLArgument>;
    directives: List<GQLDirective>;
    fields: List<GQLField>;
    resultType: GQLTypeDefinition;
    processedArgs: GQLQueryArguments;
    plans: List<GQLExecutionPlan>;
    scalars: List<QueryResult>;
    objects: List<QueryResult>;
    result: QueryResult;
    allFields: List<GQLField>;
    defaultStrategy: string;
    multipleSubjectIds: List<string>;
    constructor(parent: GQLExecutionPlan | null, context: ResolverContext, vars: Map<string, any>, name: string, alias: Option<string>, args: List<GQLArgument>, directives: List<GQLDirective>, fields: List<[string, GQLField]>);
    execute(queryBuilder: GQLQueryBuilder): Promise<QueryResult>;
    grandParentPlan(): Option<GQLExecutionPlan>;
    greatGrandParentPlan(): Option<GQLExecutionPlan>;
    isConnectionEdgesPlan(): boolean | null;
    getSubjectIds(): List<any>;
    protected resolveFields(): List<Promise<QueryResult>>;
    protected resolvePlans(queryBuilder: GQLQueryBuilder): List<Promise<QueryResult>>;
    protected makePlanResult(): QueryResult;
    protected getScalarsErrors(): List<string>;
    protected getSubPlansErrors(): List<string>;
    protected finalizeResults(): void;
    protected strategies(): List<import("..").QueryStrategy>;
    protected resolveDefaultStrategy(): void;
    protected isStrategyAvailable(strategy: string): boolean;
    protected getStrategyFor(field: GQLField): string;
    protected resolveWith(directives: List<GQLDirective>): Option<string>;
    protected idFields(directives: List<GQLDirective>): List<GQLFieldDefinition>;
    private _initFields;
}
