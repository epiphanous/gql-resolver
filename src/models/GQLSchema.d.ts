import { Option } from 'funfix';
import { List, Map, Set } from 'immutable';
import { GQLDirective } from './GQLDirective';
import { GQLField, GQLInlineFragment, GQLSelection } from './GQLSelection';
import { GQLDirectiveDefinition, GQLEnum, GQLFieldDefinition, GQLInputType, GQLInterface, GQLObjectType, GQLScalarType, GQLTypeDefinition, GQLUnion } from './GQLTypeDefinition';
export interface IGQLSchema {
    allFields: Map<string, GQLFieldDefinition>;
    allTypes: Map<string, GQLTypeDefinition>;
    directives: Map<string, GQLDirectiveDefinition>;
    enums: Map<string, GQLEnum>;
    inputTypes: Map<string, GQLInputType>;
    interfaces: Map<string, GQLInterface>;
    objectTypes: Map<string, GQLObjectType>;
    operationTypes: Map<string, string>;
    scalarTypes: Map<string, GQLScalarType>;
    unions: Map<string, GQLUnion>;
    fieldsByType: Map<string, Map<string, List<string>>>;
    typesByInterface: Map<string, Set<string>>;
    objectTypesForField: Map<string, Set<string>>;
}
export declare class GQLSchema implements IGQLSchema {
    allFields: Map<string, GQLFieldDefinition>;
    allTypes: Map<string, GQLTypeDefinition>;
    directives: Map<string, GQLDirectiveDefinition>;
    enums: Map<string, GQLEnum>;
    inputTypes: Map<string, GQLInputType>;
    interfaces: Map<string, GQLInterface>;
    objectTypes: Map<string, GQLObjectType>;
    operationTypes: Map<string, string>;
    scalarTypes: Map<string, GQLScalarType>;
    unions: Map<string, GQLUnion>;
    schemaDirectives: List<GQLDirective>;
    fieldsByType: Map<string, Map<string, List<string>>>;
    typesByInterface: Map<string, Set<string>>;
    objectTypesForField: Map<string, Set<string>>;
    constructor(allFields: Map<string, GQLFieldDefinition>, allTypes: Map<string, GQLTypeDefinition>, directives: Map<string, GQLDirectiveDefinition>, enums: Map<string, GQLEnum>, inputTypes: Map<string, GQLInputType>, interfaces: Map<string, GQLInterface>, objectTypes: Map<string, GQLObjectType>, operationTypes: Map<string, string>, scalarTypes: Map<string, GQLScalarType>, unions: Map<string, GQLUnion>, schemaDirectives: Set<GQLDirective>);
    init(): void;
    getTypeName(t: string | GQLTypeDefinition): string;
    isScalar(t: string | GQLTypeDefinition): boolean;
    isScalarLike(t: string | GQLTypeDefinition): boolean;
    isScalarObjectType(t: string | GQLTypeDefinition): boolean;
    isInterface(t: string | GQLTypeDefinition): boolean;
    isUnion(t: string | GQLTypeDefinition): boolean;
    isUnionScalarLike(t: string | GQLTypeDefinition): boolean;
    isObjectType(t: string | GQLTypeDefinition): boolean;
    isObjectLike(t: string | GQLTypeDefinition): boolean;
    isMultiType(t: string | GQLTypeDefinition): boolean;
    isEnum(t: string | GQLTypeDefinition): boolean;
    getTypeClass(tdOpt: Option<GQLTypeDefinition>): Option<string>;
    getKind(t: Option<GQLTypeDefinition>): string;
    getType(t: Option<GQLTypeDefinition>): string;
    getTypeDefinition(t: string): Option<GQLTypeDefinition>;
    getFieldDefinition(f: string): Option<GQLFieldDefinition>;
    getFieldSubjectObjectTypes(f: string): Set<string>;
    getFieldType(f: string): Option<string>;
    getFieldTypeDefinition(f: string): Option<GQLTypeDefinition>;
    containsFields(t: string, fields: List<string>): boolean;
    validFieldsForType(t: string): Map<string, string>;
    parseTypeInfo(objType: string): List<string>;
    partitionFields(fields: List<[string, GQLField]>): [List<[string, GQLField]>, List<[string, GQLField]>, List<Error>];
    getFieldsOf(t: string): List<GQLFieldDefinition> | undefined;
    getImplementingTypes(t: string): Set<string>;
    getDirectiveDefinition(name: string): Option<GQLDirectiveDefinition>;
    nestedField(selections: List<GQLSelection | GQLField | GQLInlineFragment>, fieldName: string): Option<GQLField>;
    nestedFragment(selections: List<GQLSelection | GQLField | GQLInlineFragment>, fieldType: string): Option<[GQLInlineFragment, Option<GQLField>]>;
    typeMembers(fieldsOfType: (a: string) => Option<[GQLInlineFragment, Option<GQLField>]>, typeInfo: string): List<GQLField>;
    inlineFragmentChildFieldMappingsOf(selections: List<GQLSelection>, field: string): Map<string, List<GQLField>>;
    private _scalarsObjects;
}
